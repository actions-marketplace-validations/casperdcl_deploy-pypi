name: PyPI Deployment
author: Casper da Costa-Luis
description: Securely build and upload Python distributions to PyPI
inputs:
  user:
    description: PyPI username
    required: false
    default: __token__
  password:
    description: PyPI password or API token
    required: true
  requirements:
    description: Build requirements
    required: false
    default: twine wheel
  build:
    description: '`setup.py` command to run ("true" is a shortcut for "clean sdist -d <dist_dir> bdist_wheel -d <dist_dir>")'
    required: false
    default: false
  check:
    description: Whether to run basic checks on the built files
    required: false
    default: true
  upload:
    description: Whether to upload
    required: false
    default: true
  dist_dir:
    description: Directory containing distributions
    required: false
    default: dist
  url:
    description: Destination repository (package index) URL
    required: false
    default: ''
  gpg_key:
    description: GPG key to import for signing
    required: false
    default: ''
  skip_existing:
    description: Continue uploading files if one already exists
    required: false
    default: false
runs:
  using: composite
  steps:
    - name: build
      run: |
        if [[ -n "$INPUT_REQUIREMENTS" && "$INPUT_BUILD" != false ]]; then
          python -m pip install $INPUT_REQUIREMENTS
        fi
        if [[ "$INPUT_BUILD" == *build* || "$INPUT_BUILD" == *dist* || "$INPUT_BUILD" == *clean* ]]; then
          python setup.py $INPUT_BUILD
        elif [[ "$INPUT_BUILD" == true ]]; then
          python setup.py sdist -d "$INPUT_DIST_DIR" bdist_wheel -d "$INPUT_DIST_DIR"
        fi
      shell: bash
      env:
        INPUT_REQUIREMENTS: ${{ inputs.requirements }}
        INPUT_BUILD: ${{ inputs.build }}
        INPUT_DIST_DIR: ${{ inputs.dist_dir }}
    - name: check
      run: |
        if [[ "$INPUT_CHECK" == true ]]; then
          python -m twine check "${INPUT_DIST_DIR%%/}"/*
        fi
      shell: bash
      env:
        INPUT_DIST_DIR: ${{ inputs.dist_dir }}
        INPUT_CHECK: ${{ inputs.check }}
    - name: upload
      run: |
        if [[ "$INPUT_UPLOAD" == true ]]; then
          TWINE_OPTS=""
          if [[ -n "$INPUT_GPG_KEY" ]]; then
            gpg --import <(echo "$INPUT_GPG_KEY")
            TWINE_OPTS="$TWINE_OPTS -s --sign-with gpg"
          fi
          if [[ "$INPUT_SKIP_EXISTING" == true ]]; then
            TWINE_OPTS="$TWINE_OPTS --skip-existing"
          fi
          python -m twine upload $TWINE_OPTS "${INPUT_DIST_DIR%%/}"/*
        fi
      shell: bash
      env:
        INPUT_UPLOAD: ${{ inputs.upload }}
        INPUT_DIST_DIR: ${{ inputs.dist_dir }}
        INPUT_GPG_KEY: ${{ inputs.gpg_key }}
        INPUT_SKIP_EXISTING: ${{ inputs.skip_existing }}
        TWINE_REPOSITORY_URL: ${{ inputs.url }}
        TWINE_USERNAME: ${{ inputs.user }}
        TWINE_PASSWORD: ${{ inputs.password }}
branding:
  icon: upload-cloud
  color: blue
